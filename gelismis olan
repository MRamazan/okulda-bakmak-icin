import cv2
import numpy as np

def detect_lines(frame):
    height, width = frame.shape[:2]
    region_of_interest_vertices = [(0, height), (width/2, height/2), (width, height)]

    gray_image = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
    cannyed_image = cv2.Canny(gray_image, 100, 200)

    cropped_image = region_of_interest(cannyed_image, np.array([region_of_interest_vertices], np.int32))

    lines = cv2.HoughLinesP(cropped_image,
                            rho=6,
                            theta=np.pi/60,
                            threshold=160,
                            lines=np.array([]),
                            minLineLength=40,
                            maxLineGap=25)

    line_image = np.zeros((height, width, 3), dtype=np.uint8)
    draw_lines(line_image, lines)

    combo_image = cv2.addWeighted(frame, 0.8, line_image, 1, 0)

    return combo_image


def region_of_interest(img, vertices):
    mask = np.zeros_like(img)
    match_mask_color = 255
    cv2.fillPoly(mask, vertices, match_mask_color)
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image


def draw_lines(img, lines, color=[0, 0, 255], thickness=3):
    if lines is None:
        return
    for line in lines:
        for x1, y1, x2, y2 in line:
            cv2.line(img, (x1, y1), (x2, y2), color, thickness)


cap = cv2.VideoCapture("vÄ±deo.mp4")
while True:
    ret, frame = cap.read()
    if not ret:
        break

    result = detect_lines(frame)
    cv2.imshow("Result", result)

    if cv2.waitKey(1) == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
